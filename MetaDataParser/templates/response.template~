#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set ts=4 sts=4 sw=4 et:
<%
import os
import time
version = 0
try:
    from mercurial import ui, hg
    version = hg.repository(ui.ui(), '.').changelog.headrevs()[0]
except Exception:
    version = 0
description = str()
try:
    description = api.getElementsByTagName("desc")[0].firstChild.data.replace(os.linesep, str())
except Exception:
    pass
%>

\#\# @brief ${description.replace(os.linesep, str())}
# @author wuliang@maimiaotech.com
# @date ${time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())}
# @version: 0.0.${version}

from datetime import datetime
import os
import sys
import time

def __getCurrentPath():
    return os.path.normpath(os.path.join(os.path.realpath(__file__), os.path.pardir))
    
__parentPath = os.path.normpath(os.path.join(__getCurrentPath(), os.path.pardir))
if __parentPath not in sys.path:
    sys.path.insert(0, __parentPath)

## 导入所依赖的类
<%
imported = list()
%>
% if len(api.getElementsByTagName("response")) > 0:
    % for parameter in api.getElementsByTagName("response")[0].getElementsByTagName("param"):
    <%
        type = None
        level = None
        try:
            type = parameter.getElementsByTagName("type")[0].firstChild.data
        except Exception:
            pass
        try:
            level = parameter.getElementsByTagName("level")[0].firstChild.data
        except Exception:
            pass
        if level == None or type == None:
            continue
        if level == "Basic" or level == "Basic Array":
            continue
        if type in imported:
            continue
        name = parameter.getElementsByTagName("name")[0].firstChild.data
    %>
from Domain.${type} import ${type}
<%
    imported.append(type)
%>
    % endfor
% endif

<%
methodName = api.getElementsByTagName("name")[0].firstChild.data

authorize = str()
try:
    authorize = api.getElementsByTagName("authorize")[0].firstChild
except Exception:
    pass
%>
\#\# @brief <SPAN style="font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">Response: ${description}</SPAN>
# <UL>
% if authorize != str():
# <LI>
# <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Authorize</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${authorize}</SPAN>
# </LI>
% endif
# </UL>
class ${''.join(x.capitalize() for x in api.getElementsByTagName("name")[0].firstChild.data.lstrip("taobao").split(".") if x) + "Response"}(object):
    def __init__(self, kargs=dict()):
        super(self.__class__, self).__init__()

        \#\# @brief <SPAN style="font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">请求的返回信息,包含状态等</SPAN>
        # <UL>
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Type</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">dict</SPAN>
        # </LI>
        # </UL>
        self.responseStatus = None

        \#\# @brief <SPAN style="font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">请求的响应内容</SPAN>
        # <UL>
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Type</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">str</SPAN>
        # </LI>
        # </UL>        
        self.responseBody = None

        self.code = None

        self.msg = None

        self.sub_code = None

        self.sub_msg = None

    ## 从元数据中解析得到的属性
    % if len(api.getElementsByTagName("response")) > 0:
        % for parameter in api.getElementsByTagName("response")[0].getElementsByTagName("param"):
        <%
        type = str()
        level = str()
        required = str()
        description = str()
        sample = str()

        try:
            type = parameter.getElementsByTagName("type")[0].firstChild.data
        except Exception:
            pass
        try:
            level = parameter.getElementsByTagName("level")[0].firstChild.data
        except Exception:
            pass
        try:
            required = parameter.getElementsByTagName("required")[0].firstChild.data
        except Exception:
            pass
        try:
            description = parameter.getElementsByTagName("desc")[0].firstChild.data
        except Exception:
            pass
        try:
            sample = parameter.getElementsByTagName("sample")[0].firstChild.data
        except Exception:
            pass
        name = parameter.getElementsByTagName("name")[0].firstChild.data
        %>
        
        \#\# @brief <SPAN style="font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">${description.replace(os.linesep, str())}</SPAN>
        # <UL>
        % if type != str():
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Type</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${type}</SPAN>
        # </LI>
        % endif
        % if level != str():
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Level</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${level}</SPAN>
        # </LI>
        % endif
        % if required != str():
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Required</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${required}</SPAN>
        # </LI>
        % endif
        % if sample != str():
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Sample</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${sample}</SPAN>
        # </LI>
        % endif
        # </UL>
        self.${name} = None
        % endfor
    % endif
    
        self.__init(kargs)

    def isSuccess(self):
        return self.code == None and self.sub_code == None
    
    def _newInstance(self, name, value):
        types = self._getPropertyType(name)
        propertyType = types[0]
        isArray = types[1]
        if propertyType == bool:
            if isArray:
                return [x for x in value[value.keys()[0]]]
            else:
                return value
        elif propertyType == datetime:
            format = "%Y-%m-%d %H:%M:%S"
            if isArray:
                return [datetime.strptime(x, format) for x in value[value.keys()[0]]]
            else:
                return datetime.strptime(value, format)
        elif propertyType == str:
            if isArray:
                return [x.encode("utf-8") for x in value[value.keys()[0]]]
            else:
                #like taobao.simba.rpt.adgroupbase.get, response.rpt_adgroup_base_list is a json string,but will be decode into a list via python json lib 
                if not isinstance(value,str):
                    #the value should be a json string 
                    return value
                return value.encode("utf-8")
        else:
            if isArray:
                return [propertyType(x) for x in value[value.keys()[0]]]
            else:
                return propertyType(value)
        
    def _getPropertyType(self, name):
        properties = {
            % if len(api.getElementsByTagName("response")) > 0:
            % for parameter in api.getElementsByTagName("response")[0].getElementsByTagName("param"):
            <%
                name = parameter.getElementsByTagName("name")[0].firstChild.data
                type = parameter.getElementsByTagName("type")[0].firstChild.data
            %>
            "${name}": "${type}",
            % endfor
            % endif
        }
        levels = {
            % if len(api.getElementsByTagName("response")) > 0:
            % for parameter in api.getElementsByTagName("response")[0].getElementsByTagName("param"):
            <%
                name = parameter.getElementsByTagName("name")[0].firstChild.data
                level = parameter.getElementsByTagName("level")[0].firstChild.data
            %>
            "${name}": "${level}",
            % endfor
            % endif
        }
        
        nameType = properties[name]
        nameTypeToPythonType = {"Number":int, "String":str, "Boolean":bool, "Date":datetime, "Price":float, "byte[]":str}
        pythonType = nameTypeToPythonType.get(nameType, getattr(sys.modules["Domain.%s" % nameType], nameType))
        
        # 是单个元素还是一个对象
        level = levels[name]
        if "Array" in level:
            return (pythonType, True)
        else:
            return (pythonType, False)

    def __init(self, kargs):
    % if len(api.getElementsByTagName("response")) > 0:
        % for parameter in api.getElementsByTagName("response")[0].getElementsByTagName("param"):
        <%
        name = parameter.getElementsByTagName("name")[0].firstChild.data
        %>
        if "${name}" in kargs:
            self.${name} = self._newInstance("${name}", kargs["${name}"])
        % endfor
    % endif
        if "code" in kargs:
            self.code = kargs["code"]
        if "msg" in kargs:
            self.msg = kargs["msg"]
        if "sub_code" in kargs:
            self.sub_code = kargs["sub_code"]
        if "sub_msg" in kargs:
            self.sub_msg = kargs["sub_msg"]
